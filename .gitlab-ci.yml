before_script:
  - id
  - pwd
  - ruby -v
  - python3 --version
  - if [ -e venv/bin/activate ] ; then source venv/bin/activate ; else echo "No virtualenv !" ; fi

stages:
  - install
  - build
  - test
  - deploy

cache:
  paths:
    - venv/

requirements-install:
  stage: install
  script:
    - if [ ! -e venv/bin/activate ] ; then virtualenv -p $(which python3) venv ; fi
    - bundle install --jobs $(nproc) --path venv/ruby
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-test.txt
    - cp -f members/settings.py.example members/settings.py
    - echo LDAP_SERVER_URI = \'ldap://$LDAP_TEST_URL\' > members/localSettings.py
    - echo LDAP_AUTHENTICATION_DN = \'$LDAP_TEST_AUTH_DN\' >> members/localSettings.py
    - echo LDAP_AUTHENTICATION_PASSWORD = \'$LDAP_TEST_AUTH_PWD\' >> members/localSettings.py
    - echo LDAP_MANAGEMENT_DN = \'$LDAP_TEST_MGMT_DN\' >> members/localSettings.py
    - echo LDAP_MANAGEMENT_PASSWORD = \'$LDAP_TEST_MGMT_PWD\' >> members/localSettings.py

db-migrations:
  stage: build
  dependencies:
    - requirements-install
  script:
    - python manage.py makemigrations

accounts-test:
  stage: test
  except:
    - master
  dependencies:
    - requirements-install
  script:
    - python manage.py test accounts

network-test:
  stage: test
  except:
    - master
  dependencies:
    - requirements-install
  script:
    - python manage.py test network

deploy_dev:
  stage: deploy
  environment:
    name: dev
    url: https://members-dev.atilla.org
  only:
    - dev
  script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_DEV_PRIVATE_KEY")
    - ssh -t members@members-dev.dev.infra.atilla.org "cd members/misc; ./deploy.sh dev"

deploy_prod:
  stage: deploy
  environment:
    name: production
    url: https://members.atilla.org
  only:
    - master
  when: manual
  script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_DEV_PRIVATE_KEY")
    - ssh -t members@members-prod.prod.infra.atilla.org "cd members/misc; ./deploy.sh master"
